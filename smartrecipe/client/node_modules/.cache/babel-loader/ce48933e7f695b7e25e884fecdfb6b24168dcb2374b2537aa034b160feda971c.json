{"ast":null,"code":"var _jsxFileName = \"/Users/gadeynagasrisaiaditya/Desktop/Aditya/Thaniya & vyshanvi minor project  /project /smartrecipe/client/src/components/chatbot/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useContext } from 'react';\nimport { Button, Form, Spinner } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faRobot, faPaperPlane, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport './Chatbot.css';\nimport api from '../../utils/api';\nimport AuthContext from '../../context/auth/authContext';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const authContext = useContext(AuthContext);\n  const {\n    isAuthenticated,\n    user\n  } = authContext;\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  // Initialize or reset messages when chatbot is opened\n  useEffect(() => {\n    if (isOpen) {\n      setMessages([{\n        id: Date.now(),\n        text: \"Hi there! I'm your Smart Recipe assistant powered by Gemini AI. Need help with recipes or cooking tips? I'm here to provide detailed advice!\",\n        sender: 'bot'\n      }]);\n    } else {\n      setMessages([]);\n      setNewMessage('');\n    }\n  }, [isOpen]);\n\n  // Auto-scroll to bottom of messages\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, isOpen]);\n  const toggleChatbot = () => {\n    setIsOpen(!isOpen);\n  };\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    if (newMessage.trim() === '') return;\n\n    // Add user message\n    const userMessage = {\n      id: Date.now(),\n      text: newMessage,\n      sender: 'user'\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setNewMessage('');\n    setIsTyping(true);\n    try {\n      if (!isAuthenticated) {\n        // If not authenticated, use local response\n        setTimeout(() => {\n          const botResponse = getLocalBotResponse(newMessage);\n          setMessages(prev => [...prev, {\n            id: Date.now(),\n            text: botResponse,\n            sender: 'bot'\n          }]);\n          setIsTyping(false);\n        }, 1000);\n        return;\n      }\n\n      // Get response from Gemini through our backend\n      const response = await api.post('/api/chatbot', {\n        message: newMessage\n      });\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        text: response.data.response,\n        sender: 'bot'\n      }]);\n    } catch (err) {\n      console.error('Error getting chatbot response:', err);\n\n      // Check if this is a rate limit error\n      let errorMessage = \"I'm having trouble connecting to my knowledge base right now. Let me provide a simpler response.\";\n      if (err.response) {\n        if (err.response.status === 429) {\n          errorMessage = \"I've reached my conversation limit for now. Please try again in a minute or let me give you a simpler response.\";\n          toast.warning('Chatbot rate limit reached. Please wait a moment before sending more messages.');\n        } else {\n          toast.error('Chatbot service is experiencing issues');\n        }\n      } else {\n        toast.error('Chatbot service is experiencing issues');\n      }\n\n      // Fallback to local response\n      const localResponse = getLocalBotResponse(newMessage);\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        text: errorMessage + \"\\n\\n\" + localResponse,\n        sender: 'bot'\n      }]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  // Local fallback responses if API is unavailable\n  const getLocalBotResponse = userInput => {\n    const input = userInput.toLowerCase();\n    if (input.includes('hello') || input.includes('hi') || input.includes('hey')) {\n      return 'Hello! How can I help you with your cooking today?';\n    }\n    if (input.includes('recipe') && (input.includes('generate') || input.includes('create') || input.includes('make'))) {\n      return 'To generate a recipe, go to the Recipe Generator tab. You can either select ingredients from the dropdown or upload a photo of a dish you want to recreate!';\n    }\n    if (input.includes('grocery') || input.includes('shopping list')) {\n      return 'Your grocery list can be managed in the Grocery List tab. You can add items manually or generate a list automatically from any recipe!';\n    }\n    if (input.includes('save') || input.includes('saved recipe')) {\n      return 'To save a recipe, click the Save button on any recipe card. You can access your saved recipes by clicking your profile icon at the top right.';\n    }\n    if (input.includes('calorie') || input.includes('nutrition')) {\n      return 'Calorie information is displayed on each recipe. For more detailed nutritional information, click on the recipe to view its full details!';\n    }\n    if (input.includes('contact') || input.includes('help') || input.includes('support')) {\n      return 'For additional support, please contact our helpline at support@smartrecipe.com or call us at 1-800-RECIPES.';\n    }\n    if (input.includes('thank')) {\n      return \"You're welcome! Happy cooking!\";\n    }\n    return \"I'm not sure I understand. Try asking about recipes, grocery lists, or how to use specific features of the app!\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"mb-0\",\n          children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faRobot,\n            className: \"me-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 15\n          }, this), \"Recipe Assistant\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"link\",\n          className: \"p-0 text-white\",\n          onClick: toggleChatbot,\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faTimes\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-messages\",\n        children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender}`,\n          children: message.text.split('\\n').map((line, i) => /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mb-1\",\n            children: line\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 19\n          }, this))\n        }, message.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 15\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message bot typing\",\n          children: [/*#__PURE__*/_jsxDEV(Spinner, {\n            animation: \"grow\",\n            size: \"sm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Spinner, {\n            animation: \"grow\",\n            size: \"sm\",\n            className: \"mx-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Spinner, {\n            animation: \"grow\",\n            size: \"sm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSendMessage,\n        className: \"chatbot-input\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          placeholder: \"Ask me about recipes, cooking tips, or ingredients...\",\n          value: newMessage,\n          onChange: e => setNewMessage(e.target.value),\n          autoFocus: true,\n          disabled: isTyping\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"primary\",\n          disabled: isTyping,\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faPaperPlane\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this), !isAuthenticated && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-auth-notice\",\n        children: /*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"Sign in for Gemini AI-powered detailed responses\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"chatbot-toggle\",\n      onClick: toggleChatbot,\n      title: \"Need help or a recipe? I'm here to help!\",\n      children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faRobot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"5nHLL/ia3fTIuqu+/9pAmjzIFLE=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useContext","Button","Form","Spinner","FontAwesomeIcon","faRobot","faPaperPlane","faTimes","api","AuthContext","toast","jsxDEV","_jsxDEV","Chatbot","_s","authContext","isAuthenticated","user","isOpen","setIsOpen","messages","setMessages","newMessage","setNewMessage","isTyping","setIsTyping","messagesEndRef","id","Date","now","text","sender","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","toggleChatbot","handleSendMessage","e","preventDefault","trim","userMessage","prev","setTimeout","botResponse","getLocalBotResponse","response","post","message","data","err","console","error","errorMessage","status","warning","localResponse","userInput","input","toLowerCase","includes","className","children","icon","fileName","_jsxFileName","lineNumber","columnNumber","variant","onClick","map","split","line","i","animation","size","ref","onSubmit","Control","type","placeholder","value","onChange","target","autoFocus","disabled","title","_c","$RefreshReg$"],"sources":["/Users/gadeynagasrisaiaditya/Desktop/Aditya/Thaniya & vyshanvi minor project  /project /smartrecipe/client/src/components/chatbot/Chatbot.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useContext } from 'react';\nimport { Button, Form, Spinner } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faRobot, faPaperPlane, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport './Chatbot.css';\nimport api from '../../utils/api';\nimport AuthContext from '../../context/auth/authContext';\nimport { toast } from 'react-toastify';\n\nconst Chatbot = () => {\n  const authContext = useContext(AuthContext);\n  const { isAuthenticated, user } = authContext;\n  \n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  // Initialize or reset messages when chatbot is opened\n  useEffect(() => {\n    if (isOpen) {\n      setMessages([{ \n        id: Date.now(), \n        text: \"Hi there! I'm your Smart Recipe assistant powered by Gemini AI. Need help with recipes or cooking tips? I'm here to provide detailed advice!\", \n        sender: 'bot' \n      }]);\n    } else {\n      setMessages([]);\n      setNewMessage('');\n    }\n  }, [isOpen]);\n\n  // Auto-scroll to bottom of messages\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, isOpen]);\n\n  const toggleChatbot = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleSendMessage = async (e) => {\n    e.preventDefault();\n    \n    if (newMessage.trim() === '') return;\n    \n    // Add user message\n    const userMessage = {\n      id: Date.now(),\n      text: newMessage,\n      sender: 'user'\n    };\n    \n    setMessages(prev => [...prev, userMessage]);\n    setNewMessage('');\n    setIsTyping(true);\n    \n    try {\n      if (!isAuthenticated) {\n        // If not authenticated, use local response\n        setTimeout(() => {\n          const botResponse = getLocalBotResponse(newMessage);\n          setMessages(prev => [...prev, {\n            id: Date.now(),\n            text: botResponse,\n            sender: 'bot'\n          }]);\n          setIsTyping(false);\n        }, 1000);\n        return;\n      }\n      \n      // Get response from Gemini through our backend\n      const response = await api.post('/api/chatbot', { message: newMessage });\n      \n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        text: response.data.response,\n        sender: 'bot'\n      }]);\n    } catch (err) {\n      console.error('Error getting chatbot response:', err);\n      \n      // Check if this is a rate limit error\n      let errorMessage = \"I'm having trouble connecting to my knowledge base right now. Let me provide a simpler response.\";\n      \n      if (err.response) {\n        if (err.response.status === 429) {\n          errorMessage = \"I've reached my conversation limit for now. Please try again in a minute or let me give you a simpler response.\";\n          toast.warning('Chatbot rate limit reached. Please wait a moment before sending more messages.');\n        } else {\n          toast.error('Chatbot service is experiencing issues');\n        }\n      } else {\n        toast.error('Chatbot service is experiencing issues');\n      }\n      \n      // Fallback to local response\n      const localResponse = getLocalBotResponse(newMessage);\n      \n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        text: errorMessage + \"\\n\\n\" + localResponse,\n        sender: 'bot'\n      }]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  // Local fallback responses if API is unavailable\n  const getLocalBotResponse = (userInput) => {\n    const input = userInput.toLowerCase();\n    \n    if (input.includes('hello') || input.includes('hi') || input.includes('hey')) {\n      return 'Hello! How can I help you with your cooking today?';\n    }\n    \n    if (input.includes('recipe') && (input.includes('generate') || input.includes('create') || input.includes('make'))) {\n      return 'To generate a recipe, go to the Recipe Generator tab. You can either select ingredients from the dropdown or upload a photo of a dish you want to recreate!';\n    }\n    \n    if (input.includes('grocery') || input.includes('shopping list')) {\n      return 'Your grocery list can be managed in the Grocery List tab. You can add items manually or generate a list automatically from any recipe!';\n    }\n    \n    if (input.includes('save') || input.includes('saved recipe')) {\n      return 'To save a recipe, click the Save button on any recipe card. You can access your saved recipes by clicking your profile icon at the top right.';\n    }\n    \n    if (input.includes('calorie') || input.includes('nutrition')) {\n      return 'Calorie information is displayed on each recipe. For more detailed nutritional information, click on the recipe to view its full details!';\n    }\n    \n    if (input.includes('contact') || input.includes('help') || input.includes('support')) {\n      return 'For additional support, please contact our helpline at support@smartrecipe.com or call us at 1-800-RECIPES.';\n    }\n    \n    if (input.includes('thank')) {\n      return \"You're welcome! Happy cooking!\";\n    }\n    \n    return \"I'm not sure I understand. Try asking about recipes, grocery lists, or how to use specific features of the app!\";\n  };\n\n  return (\n    <div className=\"chatbot-container\">\n      {isOpen && (\n        <div className=\"chatbot-window\">\n          <div className=\"chatbot-header\">\n            <h5 className=\"mb-0\">\n              <FontAwesomeIcon icon={faRobot} className=\"me-2\" />\n              Recipe Assistant\n            </h5>\n            <Button \n              variant=\"link\" \n              className=\"p-0 text-white\" \n              onClick={toggleChatbot}\n            >\n              <FontAwesomeIcon icon={faTimes} />\n            </Button>\n          </div>\n          \n          <div className=\"chatbot-messages\">\n            {messages.map(message => (\n              <div \n                key={message.id} \n                className={`message ${message.sender}`}\n              >\n                {message.text.split('\\n').map((line, i) => (\n                  <p key={i} className=\"mb-1\">{line}</p>\n                ))}\n              </div>\n            ))}\n            \n            {isTyping && (\n              <div className=\"message bot typing\">\n                <Spinner animation=\"grow\" size=\"sm\" />\n                <Spinner animation=\"grow\" size=\"sm\" className=\"mx-1\" />\n                <Spinner animation=\"grow\" size=\"sm\" />\n              </div>\n            )}\n            \n            <div ref={messagesEndRef} />\n          </div>\n          \n          <Form onSubmit={handleSendMessage} className=\"chatbot-input\">\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Ask me about recipes, cooking tips, or ingredients...\"\n              value={newMessage}\n              onChange={(e) => setNewMessage(e.target.value)}\n              autoFocus\n              disabled={isTyping}\n            />\n            <Button type=\"submit\" variant=\"primary\" disabled={isTyping}>\n              <FontAwesomeIcon icon={faPaperPlane} />\n            </Button>\n          </Form>\n          \n          {!isAuthenticated && (\n            <div className=\"chatbot-auth-notice\">\n              <small>Sign in for Gemini AI-powered detailed responses</small>\n            </div>\n          )}\n        </div>\n      )}\n      \n      <Button \n        className=\"chatbot-toggle\"\n        onClick={toggleChatbot}\n        title=\"Need help or a recipe? I'm here to help!\"\n      >\n        <FontAwesomeIcon icon={faRobot} />\n      </Button>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}